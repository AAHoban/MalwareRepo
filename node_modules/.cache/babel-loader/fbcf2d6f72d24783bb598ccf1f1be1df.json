{"ast":null,"code":"import * as actionType from '../contexts/AppContext/actions-types';\nimport { ValidateIPaddress } from './getIPaddress';\nexport const getIPLocation = async (ip, dispatch) => {\n  dispatch({\n    type: actionType.GET_LOCATION_START_ASYNC\n  });\n\n  try {\n    if (ValidateIPaddress(ip)) {\n      const dataRaw = await fetch(`https://geo.ipify.org/api/v2/country,city?apiKey=at_brv1IBaELUFJmV2CHZlrCFgKrI14t&ipAddress=${ip}`);\n\n      if (dataRaw.status !== 200) {\n        throw new Error('oops something went wrong. please try again later');\n      } else {\n        const dataJson = await dataRaw.json();\n        dispatch({\n          type: actionType.GET_LOCATION_END_ASYNC,\n          payload: dataJson\n        });\n      }\n    } else {\n      const dataRaw = await fetch(`https://geo.ipify.org/api/v2/country,city?apiKey=at_brv1IBaELUFJmV2CHZlrCFgKrI14t&domain=${ip}`);\n\n      if (dataRaw.status !== 200) {\n        throw new Error('oops something went wrong. please try again later');\n      } else {\n        const dataJson = await dataRaw.json();\n        dispatch({\n          type: actionType.GET_LOCATION_END_ASYNC,\n          payload: dataJson\n        });\n      }\n    }\n  } catch (e) {\n    console.log(e);\n    dispatch({\n      type: actionType.GET_LOCATION_ERROR_ASYNC,\n      payload: e.message\n    });\n  }\n};","map":{"version":3,"names":["actionType","ValidateIPaddress","getIPLocation","ip","dispatch","type","GET_LOCATION_START_ASYNC","dataRaw","fetch","status","Error","dataJson","json","GET_LOCATION_END_ASYNC","payload","e","console","log","GET_LOCATION_ERROR_ASYNC","message"],"sources":["C:/Users/ali-v/OneDrive/Desktop/Cora/cora/MalwareRepo/src/helpers/getIPLocation.js"],"sourcesContent":["import * as actionType from '../contexts/AppContext/actions-types';\nimport { ValidateIPaddress } from './getIPaddress';\n\nexport const getIPLocation = async (ip, dispatch) => {\n  dispatch({ type: actionType.GET_LOCATION_START_ASYNC });\n  try {\n    if (ValidateIPaddress(ip)) {\n      const dataRaw = await fetch(\n        `https://geo.ipify.org/api/v2/country,city?apiKey=at_brv1IBaELUFJmV2CHZlrCFgKrI14t&ipAddress=${ip}`,\n      );\n\n      if (dataRaw.status !== 200) {\n        throw new Error('oops something went wrong. please try again later');\n      } else {\n        const dataJson = await dataRaw.json();\n\n        dispatch({\n          type: actionType.GET_LOCATION_END_ASYNC,\n          payload: dataJson,\n        });\n      }\n    } else {\n      const dataRaw = await fetch(\n        `https://geo.ipify.org/api/v2/country,city?apiKey=at_brv1IBaELUFJmV2CHZlrCFgKrI14t&domain=${ip}`,\n      );\n\n      if (dataRaw.status !== 200) {\n        throw new Error('oops something went wrong. please try again later');\n      } else {\n        const dataJson = await dataRaw.json();\n\n        dispatch({\n          type: actionType.GET_LOCATION_END_ASYNC,\n          payload: dataJson,\n        });\n      }\n    }\n  } catch (e) {\n    console.log(e);\n    dispatch({ type: actionType.GET_LOCATION_ERROR_ASYNC, payload: e.message });\n  }\n};\n"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,sCAA5B;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AAEA,OAAO,MAAMC,aAAa,GAAG,OAAOC,EAAP,EAAWC,QAAX,KAAwB;EACnDA,QAAQ,CAAC;IAAEC,IAAI,EAAEL,UAAU,CAACM;EAAnB,CAAD,CAAR;;EACA,IAAI;IACF,IAAIL,iBAAiB,CAACE,EAAD,CAArB,EAA2B;MACzB,MAAMI,OAAO,GAAG,MAAMC,KAAK,CACxB,+FAA8FL,EAAG,EADzE,CAA3B;;MAIA,IAAII,OAAO,CAACE,MAAR,KAAmB,GAAvB,EAA4B;QAC1B,MAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;MACD,CAFD,MAEO;QACL,MAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAR,EAAvB;QAEAR,QAAQ,CAAC;UACPC,IAAI,EAAEL,UAAU,CAACa,sBADV;UAEPC,OAAO,EAAEH;QAFF,CAAD,CAAR;MAID;IACF,CAfD,MAeO;MACL,MAAMJ,OAAO,GAAG,MAAMC,KAAK,CACxB,4FAA2FL,EAAG,EADtE,CAA3B;;MAIA,IAAII,OAAO,CAACE,MAAR,KAAmB,GAAvB,EAA4B;QAC1B,MAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;MACD,CAFD,MAEO;QACL,MAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAR,EAAvB;QAEAR,QAAQ,CAAC;UACPC,IAAI,EAAEL,UAAU,CAACa,sBADV;UAEPC,OAAO,EAAEH;QAFF,CAAD,CAAR;MAID;IACF;EACF,CAhCD,CAgCE,OAAOI,CAAP,EAAU;IACVC,OAAO,CAACC,GAAR,CAAYF,CAAZ;IACAX,QAAQ,CAAC;MAAEC,IAAI,EAAEL,UAAU,CAACkB,wBAAnB;MAA6CJ,OAAO,EAAEC,CAAC,CAACI;IAAxD,CAAD,CAAR;EACD;AACF,CAtCM"},"metadata":{},"sourceType":"module"}